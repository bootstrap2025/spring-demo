<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"

       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--启用spring的一些annotation -->

    <context:property-placeholder location="classpath:prop/jdbc.properties" />


    <!--<bean id="test" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc1.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc1.url}" />
        <property name="user" value="${jdbc1.username}" />
        <property name="password" value="${jdbc1.password}" />
        <property name="autoCommitOnClose" value="true"/>
    </bean>

    &lt;!&ndash; 数据源c3p0 &ndash;&gt;
    <bean id="testTnt" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc2.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc2.url}" />
        <property name="user" value="${jdbc2.username}" />
        <property name="password" value="${jdbc2.password}" />
        <property name="autoCommitOnClose" value="true"/>
    </bean>

    <bean id="dataSource" class="com.lxb.dataSource.DynamicDataSource">
        &lt;!&ndash; 为targetDataSources注入两个数据源 &ndash;&gt;
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="test" value-ref="test"/>
                <entry key="testTnt" value-ref="testTnt"/>
            </map>
        </property>
        &lt;!&ndash; 为指定数据源RoutingDataSource注入默认的数据源&ndash;&gt;
        <property name="defaultTargetDataSource" ref="test"/>
    </bean>
    &lt;!&ndash; 切面   &ndash;&gt;
    <context:component-scan base-package="com.lxb">
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
    </context:component-scan>

    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:sqlMap/*.xml"/>
    </bean>

    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lxb.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    &lt;!&ndash;  配置事物管理器&ndash;&gt;
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    &lt;!&ndash;  开启注解控制事物&ndash;&gt;
    <tx:annotation-driven transaction-manager="transactionManager"/>-->



    <aop:aspectj-autoproxy  />

    <!-- 两个数据源的功用配置，方便下面直接引用 -->
    <bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init"
          destroy-method="close" abstract="true">
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
        <property name="poolSize" value="10" />
        <property name="minPoolSize" value="10"/>
        <property name="maxPoolSize" value="30"/>
        <property name="borrowConnectionTimeout" value="60"/>
        <property name="reapTimeout" value="20"/>
        <!-- 最大空闲时间 -->
        <property name="maxIdleTime" value="60"/>
        <property name="maintenanceInterval" value="60" />
        <property name="loginTimeout" value="60"/>
        <property name="logWriter" value="60"/>
        <property name="testQuery">
            <value>select 1</value>
        </property>

    </bean>

    <!-- 配置第一个数据源 -->
    <bean id="dataSource_a" parent="abstractXADataSource">
        <!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="mysql/sitestone" />
        <property name="xaDataSourceClassName"
                  value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="URL">${jdbc1.url}</prop>
                <prop key="user">${jdbc1.username}</prop>
                <prop key="password">${jdbc1.password}</prop>
            </props>
        </property>
    </bean>

    <!-- 配置第二个数据源-->
    <bean id="dataSource_b" parent="abstractXADataSource">
        <!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="mysql/sitesttwo" />
        <property name="xaDataSourceClassName"
                  value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="URL">${jdbc2.url}</prop>
                <prop key="user">${jdbc2.username}</prop>
                <prop key="password">${jdbc2.password}</prop>
            </props>
        </property>
    </bean>


    <bean name="dynamicDatasource" class="com.lxb.dataSource.DynamicDataSource">
        <property name="targetDataSources">
            <map>
                <entry key="ds_1" value-ref="dataSource_a"/>
                <entry key="ds_2" value-ref="dataSource_b"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource_a"    />
    </bean>


    <!-- 为业务逻辑层的方法解析@DataSource注解  为当前线程的routeholder注入数据源key -->

    <!-- 为业务逻辑层的方法解析@DataSource注解  为当前线程的routeholder注入数据源key -->
    <!--  	<bean id="aspectBean" class="com.westone.datasource.aspect.DataSourceAspect"></bean>

      <aop:config>
          <aop:aspect id="dataSourceAspect" ref="aspectBean">
                 <aop:pointcut id="dataSourcePoint" expression="execution(public * com.westone.service.*.*(..))" />
                 <aop:before method="beforeDaoMethod" pointcut-ref="dataSourcePoint"/>
          </aop:aspect>
      </aop:config> -->
    <!-- <bean id="aspectBean" class="com.amos.spring.aop.ChooseDataSourceAspect"></bean>

 <aop:config>
     <aop:aspect id="dataSourceAspect" ref="aspectBean">
            <aop:pointcut id="dataSourcePoint" expression="execution(public * com.amos.spring.dschange.*.*(..))" />
            <aop:before method="changeDataSourceBeforeMethodExecution" pointcut-ref="dataSourcePoint"/>
     </aop:aspect>
 </aop:config> -->


    <!--   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
          <property name="dataSource" ref="dynamicDatasource"/>
           <property name="typeAliasesPackage" value="com.amos.spring.dschange.bean" />
      </bean> -->

    <bean id="sqlSessionFactorya" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource_a"/>
        <property name="typeAliasesPackage" value="com.lxb.model" />
        <!-- mapper和resultmap配置路径 -->
        <property name="mapperLocations">
            <list>
                <!-- 表示在com.amos目录下的任意包下的resultmap包目录中，以-resultmap.xml或-mapper.xml结尾所有文件 -->
                <value>classpath:sqlMap/*.xml</value>
            </list>
        </property>
    </bean>
    <bean id="sqlSessionFactoryb" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource_b"/>
        <property name="typeAliasesPackage" value="com.lxb.model" />
        <!-- mapper和resultmap配置路径 -->
        <property name="mapperLocations">
            <list>
                <!-- 表示在com.amos目录下的任意包下的resultmap包目录中，以-resultmap.xml或-mapper.xml结尾所有文件 -->
                <value>classpath:sqlMap/*.xml</value>
            </list>
        </property>
    </bean>


    <!--
        <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="com.amos.spring.dschange.mapper" />
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        </bean> -->

    <!--   <bean name="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg ref="sqlSessionFactory" />
    </bean> -->

    <!-- 配置自定义的SqlSessionTemplate模板，注入相关配置 -->
    <bean id="sqlSessionTemplate" class="com.lxb.mybatis.CustomSqlSessionTemplate" scope="prototype">
        <constructor-arg ref="sqlSessionFactorya" />
        <property name="targetSqlSessionFactorys">
            <map>
                <entry value-ref="sqlSessionFactorya" key="ds_1"/>
                <entry value-ref="sqlSessionFactoryb" key="ds_2"/>
            </map>
        </property>
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lxb.dao"/>
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
    </bean>

    <!--<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.amos.spring.dschange.mapper" />
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
        <property name="markerInterface" value="com.lxb.dao.ILogMapper"/>
    </bean>-->

    <!-- jta -->
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close">
        <property name="forceShutdown">
            <value>true</value>
        </property>
    </bean>

    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="300" />
    </bean>

    <bean id="springTransactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager">
            <ref bean="atomikosTransactionManager" />
        </property>
        <property name="userTransaction">
            <ref bean="atomikosUserTransaction" />
        </property>
    </bean>
    <tx:annotation-driven transaction-manager="springTransactionManager" proxy-target-class="true" />








</beans>